/* Generated by GraalVM SGXProxyGenerator. */ 

enclave {
    trusted {
        public int graalsgx_ecall_relay_getAssetId([user_check]void *iso_thread, int param_1);

        public void graalsgx_ecall_relay_Asset([user_check]void *iso_thread, int param_1, int param_2, int param_3, int param_4);

        public void graalsgx_ecall_relay_Contract([user_check]void *iso_thread, int param_1, int param_2);

        public int graalsgx_ecall_relay_add([user_check]void *iso_thread, int param_1, int param_2, int param_3);

        public void graalsgx_ecall_relay_hello([user_check]void *iso_thread, int param_1);

        public void graalsgx_ecall_relay_initLedger([user_check]void *iso_thread, int param_1);

        public void graalsgx_ecall_relay_getAsset([user_check]void *iso_thread, int param_1, int param_2);

        public void graalsgx_ecall_relay_testSerial([user_check]void *iso_thread, int param_1);

        public void graalsgx_ecall_relay_ledger_init([user_check]void *iso_thread, int param_1);

        public void graalsgx_ecall_relay_transferAsset([user_check]void *iso_thread, int param_1, int param_2, int param_3, int param_4);

        public void graalsgx_ecall_doProxyCleanupIn([user_check]void *iso_thread);

        public void graalsgx_ecall_mirrorCleanupIn([user_check]void *iso_thread, int param_1);

        public void graalsgx_ecall_mirrorCleanupOut([user_check]void *iso_thread, int param_1);

        public int graalsgx_ecall_subtract([user_check]void *iso_thread, int param_1, int param_2);

    };
};
