/* Generated by GraalVM SGXProxyGenerator. */ 

enclave {
    untrusted {
        void graalsgx_ocall_relay_Main([user_check]void *iso_thread, int param_1);

        int graalsgx_ocall_relay_subtract([user_check]void *iso_thread, int param_1, int param_2, int param_3);

        int graalsgx_ocall_subtract([user_check]void *iso_thread, int param_1, int param_2);

        void graalsgx_ocall_relay_Peer([user_check]void *iso_thread, int param_1, int param_2);

        int graalsgx_ocall_relay_getLedgerHash([user_check]void *iso_thread, int param_1);

        int graalsgx_ocall_relay_getBalance([user_check]void *iso_thread, int param_1);

        void graalsgx_ocall_relay_sayHello([user_check]void *iso_thread, int param_1);

        void graalsgx_ocall_relay_setBalance([user_check]void *iso_thread, int param_1, int param_2);

        void graalsgx_ocall_relay_setLedgerhash([user_check]void *iso_thread, int param_1, int param_2);

        int graalsgx_ocall_relay_getPeerId([user_check]void *iso_thread, int param_1);

        void graalsgx_ocall_relay_testSerial([user_check]void *iso_thread, int param_1);

        void graalsgx_ocall_doProxyCleanupIn([user_check]void *iso_thread);

        void graalsgx_ocall_mirrorCleanupIn([user_check]void *iso_thread, int param_1);

        void graalsgx_ocall_mirrorCleanupOut([user_check]void *iso_thread, int param_1);

    };
};
