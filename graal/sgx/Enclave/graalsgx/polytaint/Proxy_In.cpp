/*
* This file was generated by PolyTaint code partitioner - ERO project 2022
*
* The MIT License (MIT)
* Copyright (c) 2022 anonymous-xh anonymous-xh
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software
* and associated documentation files (the "Software"), to deal in the Software without restriction,
* including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
* subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all copies or substantial
* portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
* TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


#include "Proxy_In.h"
#include "checks.h"
#include "../../Enclave.h"
#include "graal_isolate.h"
#include "main.h"

extern graal_isolatethread_t *global_enc_iso;

double ecall_funcA() {
    return funcA_entry(global_enc_iso);
}
void sayHello_proxy() {
    ocall_sayHello();
}
int arraySum_proxy(void* param1, int len1) {
    int ret;
    ocall_arraySum(&ret,param1, len1);
    return ret;
}
void* readXData_proxy(int param1) {
    void* ret;
    ocall_readXData(&ret,param1);
    return ret;
}
